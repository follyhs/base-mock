package ft

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) ApiDefineTest(request *ApiDefineTestRequest) (response *ApiDefineTestResponse, err error) {
	response = CreateApiDefineTestResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) ApiDefineTestWithChan(request *ApiDefineTestRequest) (<-chan *ApiDefineTestResponse, <-chan error) {
	responseChan := make(chan *ApiDefineTestResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ApiDefineTest(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) ApiDefineTestWithCallback(request *ApiDefineTestRequest, callback func(response *ApiDefineTestResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ApiDefineTestResponse
		var err error
		defer close(result)
		response, err = client.ApiDefineTest(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type ApiDefineTestRequest struct {
	*requests.RpcRequest
	RequestId string `position:"Query" name:"RequestId"`
}

type ApiDefineTestResponse struct {
	*responses.BaseResponse
	ResultSwitchValue string   `json:"ResultSwitchValue"`
	ListValue         []string `json:"ListValue"`
	StructValue       struct {
		NullToEmptyStructChildValue string `json:"NullToEmptyStructChildValue"`
		SubStructValue              struct {
			SubStructChildValue string `json:"SubStructChildValue"`
		} `json:"SubStructValue"`
	} `json:"StructValue"`
	ArrayValue []struct {
		ArrayChildValue string `json:"ArrayChildValue"`
		SubArrayValue   []struct {
			SubArrayChildValue string `json:"SubArrayChildValue"`
		} `json:"SubArrayValue"`
	} `json:"ArrayValue"`
}

func CreateApiDefineTestRequest() (request *ApiDefineTestRequest) {
	request = &ApiDefineTestRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Ft", "2015-01-01", "ApiDefineTest", "", "")
	return
}

func CreateApiDefineTestResponse() (response *ApiDefineTestResponse) {
	response = &ApiDefineTestResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
