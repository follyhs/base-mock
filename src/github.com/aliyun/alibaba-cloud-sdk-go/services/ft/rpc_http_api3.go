package ft

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) RpcHttpApi3(request *RpcHttpApi3Request) (response *RpcHttpApi3Response, err error) {
	response = CreateRpcHttpApi3Response()
	err = client.DoAction(request, response)
	return
}

func (client *Client) RpcHttpApi3WithChan(request *RpcHttpApi3Request) (<-chan *RpcHttpApi3Response, <-chan error) {
	responseChan := make(chan *RpcHttpApi3Response, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.RpcHttpApi3(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) RpcHttpApi3WithCallback(request *RpcHttpApi3Request, callback func(response *RpcHttpApi3Response, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *RpcHttpApi3Response
		var err error
		defer close(result)
		response, err = client.RpcHttpApi3(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type RpcHttpApi3Request struct {
	*requests.RpcRequest
	Sleep string `position:"Query" name:"Sleep"`
	P1    string `position:"Query" name:"P1"`
}

type RpcHttpApi3Response struct {
	*responses.BaseResponse
	Params struct {
		RequestId string `json:"RequestId"`
		CallerUid string `json:"CallerUid"`
		Sleep     string `json:"Sleep"`
		P1        string `json:"P1"`
	} `json:"Params"`
}

func CreateRpcHttpApi3Request() (request *RpcHttpApi3Request) {
	request = &RpcHttpApi3Request{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Ft", "2015-01-01", "RpcHttpApi3", "", "")
	return
}

func CreateRpcHttpApi3Response() (response *RpcHttpApi3Response) {
	response = &RpcHttpApi3Response{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
